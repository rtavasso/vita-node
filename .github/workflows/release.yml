name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.ci-run.outputs.run-id }}
    steps:
      - name: Wait for CI workflow
        uses: actions/github-script@v7
        id: ci-run
        with:
          script: |
            // Get the tag commit SHA
            const tagSha = context.sha;
            
            // Wait for CI workflow to complete on this commit
            let attempts = 0;
            const maxAttempts = 30; // 15 minutes max wait
            
            while (attempts < maxAttempts) {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'ci.yml',
                head_sha: tagSha,
                status: 'completed'
              });
              
              const successfulRun = runs.data.workflow_runs.find(run => 
                run.conclusion === 'success'
              );
              
              if (successfulRun) {
                console.log(`Found successful CI run: ${successfulRun.id}`);
                core.setOutput('run-id', successfulRun.id);
                return successfulRun.id;
              }
              
              console.log(`Waiting for CI to complete... (attempt ${attempts + 1}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // 30 seconds
              attempts++;
            }
            
            throw new Error('CI workflow did not complete successfully in time');

  create-release:
    needs: wait-for-ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ needs.wait-for-ci.outputs.run-id }}
            });
            
            const prebuildArtifacts = artifacts.data.artifacts.filter(artifact => 
              artifact.name.startsWith('prebuilds-')
            );
            
            for (const artifact of prebuildArtifacts) {
              console.log(`Downloading ${artifact.name}...`);
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Extract and organize prebuilds
        run: |
          # Create prebuilds directory structure
          mkdir -p all-prebuilds
          
          # Extract each platform's prebuilds
          for zip in prebuilds-*.zip; do
            platform=$(echo $zip | sed 's/prebuilds-\(.*\)\.zip/\1/')
            unzip -q "$zip" -d temp
            
            # Move to unified structure
            if [ -d "temp/prebuilds" ]; then
              cp -r temp/prebuilds/* all-prebuilds/
            elif [ -d "temp" ]; then
              # Handle flat structure
              mkdir -p all-prebuilds
              cp -r temp/* all-prebuilds/
            fi
            rm -rf temp
          done
          
          # Create tarball with all prebuilds
          cd all-prebuilds
          tar -czf ../vita-node-${{ github.ref_name }}-prebuilds.tar.gz .
          cd ..
          
          # Also create individual platform tarballs for convenience
          for dir in all-prebuilds/*/; do
            if [ -d "$dir" ]; then
              platform=$(basename "$dir")
              tar -czf "vita-node-${{ github.ref_name }}-${platform}.tar.gz" -C all-prebuilds "$platform"
            fi
          done
          
          # List what we're releasing
          echo "=== Prebuild contents ==="
          ls -la all-prebuilds/
          find all-prebuilds -name "*.node" -type f

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          body: |
            ## vita-node ${{ github.ref_name }}
            
            ### Installation
            ```bash
            npm install vita-node
            ```
            
            ### Prebuilt Binaries
            This release includes prebuilt binaries for:
            - Linux x64
            - Windows x64
            - macOS ARM64 (Apple Silicon)
            
            The npm package will automatically download and use these prebuilt binaries.
            
            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/compare/v1.0.0...${{ github.ref_name }}) for changes.
          files: |
            vita-node-${{ github.ref_name }}-prebuilds.tar.gz
            vita-node-${{ github.ref_name }}-darwin-arm64.tar.gz
            vita-node-${{ github.ref_name }}-linux-x64.tar.gz
            vita-node-${{ github.ref_name }}-win32-x64.tar.gz
          fail_on_unmatched_files: false

  publish-npm:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Download prebuilds from release
        run: |
          # Download the combined prebuilds tarball using GitHub CLI
          gh release download ${{ github.ref_name }} \
            --pattern "vita-node-${{ github.ref_name }}-prebuilds.tar.gz" \
            --repo ${{ github.repository }}
          
          # Extract prebuilds
          mkdir -p prebuilds
          tar -xzf vita-node-${{ github.ref_name }}-prebuilds.tar.gz -C prebuilds
          
          # Verify extraction
          echo "=== Prebuilds included in npm package ==="
          find prebuilds -name "*.node" -type f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare package
        run: |
          # Ensure version matches tag
          node -e "
            const pkg = require('./package.json');
            const tagVersion = '${{ github.ref_name }}'.replace('v', '');
            if (pkg.version !== tagVersion) {
              console.error(\`Version mismatch: package.json has \${pkg.version}, tag is \${tagVersion}\`);
              process.exit(1);
            }
          "
          
          # Install dependencies (but don't build)
          npm ci --ignore-scripts

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}